const int base = 1000 * 1000 * 1000;

vector <int> get(string s){
    vector <int> a;
    for (int i = (int)s.length(); i > 0; i -= 9)
	if (i < 9)
		a.push_back (atoi (s.substr (0, i).c_str()));
	else
		a.push_back (atoi (s.substr (i-9, 9).c_str()));
    return a;
}
vector <int> add(vector <int> a, vector <int> b){
    int carry = 0;
    for (int i = 0; i < max(a.size(), b.size()) || carry; i++) {
	    if (i == a.size())
		a.push_back (0);
	    a[i] += carry + (i < b.size() ? b[i] : 0);
	    carry = a[i] >= base;
	    if (carry)  a[i] -= base;
    }
    return a;
}
vector <int> mult(vector <int> a, vector <int> b){
    vector <int> c (a.size() + b.size());
    for (int i = 0; i < a.size(); i++)
	    for (int j = 0, carry = 0; j < (int)b.size() || carry; j++) {
		    long long cur = c[i + j] + a[i] * 1ll * (j < (int)b.size() ? b[j] : 0) + carry;
		    c[i + j] = int (cur % base);
		    carry = int (cur / base);
	}
    while (c.size() > 1 && c.back() == 0)
	    c.pop_back();
    return c;
}
vector <int> multshort(vector <int> a, int b){
    int carry = 0;
    for (size_t i=0; i<a.size() || carry; ++i) {
	    if (i == a.size())
		a.push_back (0);
	    long long cur = carry + a[i] * 1ll * b;
	    a[i] = int (cur % base);
        carry = int (cur / base);
    }
    while (a.size() > 1 && a.back() == 0)
	    a.pop_back();
     return a;
}
vector <int> del(vector <int> a, int b){
	int carry = 0;
	for (int i=(int)a.size()-1; i>=0; --i) {
		long long cur = a[i] + carry * 1ll * base;
		a[i] = int (cur / b);
		carry = int (cur % b);
	}
	while (a.size() > 1 && a.back() == 0)
		a.pop_back();
	return a;
}
void print(vector <int> a){
    if ((int)a.size() == 0) cout << 0;
    else cout << a.back();
    for (int i = (int)a.size() - 2; i >= 0; i--){
        string s = to_string(a[i]);
        for (int i = 0; i < 9 - (int)s.size(); i++) cout << 0;
        cout << a[i];
    }
}