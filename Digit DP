#include <bits/stdc++.h>
using namespace std;

// https://www.spoj.com/problems/PR003004/
// dp[pos][flag][sum] sum of digits, in pos, flag - what digits we can put, sum - we have already prefix with sumDigits = sum

long long dp[16][2][200];
vector<int> d;

long long rec(int pos, int f, int sum) {
    if (pos == -1)
        return sum;
    long long &res = dp[pos][f][sum];
    if (res != -1)
        return res;
    int lmt = f ? 9 : d[pos];
    long long ans = 0;
    for (int i = 0; i <= lmt; i++) {
        int nf = f | (i < lmt);
        ans += rec(pos - 1, nf, sum + i);
    }
    return res = ans;
}

long long process(long long a) {
    memset(dp, -1, sizeof(dp));
    d.clear();
    while (a > 0) {
        d.push_back(a % 10);
        a /= 10;
    }
    return rec(d.size() - 1, 0, 0);
}

void solve() {
    long long a, b;
    cin >> a >> b;
    cout << process(b) - process(a - 1) << "\n";
}

int main() {
    ios::sync_with_stdio(NULL), cin.tie(0), cout.tie(0);
    cout.setf(ios::fixed), cout.precision(20);
    int t;
    cin >> t;
    for (int i = 1; i <= t; i++)
        solve();
    return 0;
}
